/**
 * 
 */
package com.hwc.member.util;

import java.io.File;
import java.io.IOException;
import java.util.Hashtable;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.media.ExifInterface;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;

/**
 * @author FZ
 */

public class BitmapUtil {

	public static Bitmap getBitmap(String path) {
		File f = new File(path);
		BitmapFactory.Options newOpts = new BitmapFactory.Options();
		newOpts.inJustDecodeBounds = true;
		newOpts.inJustDecodeBounds = false;
		// 计算出取样率
		newOpts.inSampleSize = 3; // 原始图片的1/1
		Bitmap bmp = BitmapFactory.decodeFile(f.getPath(), newOpts);

		int degree = readPictureDegree(path);
		if (degree <= 0) {
			return bmp;
		} else {
			// Log.e(tag, "rotate:" + degree);
			// 创建操作图片是用的matrix对象
			Matrix matrix = new Matrix();
			// 旋转图片动作
			matrix.postRotate(degree);
			// 创建新图片
			return Bitmap.createBitmap(bmp, 0, 0, bmp.getWidth(), bmp.getHeight(), matrix, true);
		}

	}

	public static Bitmap decodeSampledBitmapFromResource(String path, int reqWidth, int reqHeight) {
		File f = new File(path);
		// First decode with inJustDecodeBounds=true to check dimensions
		final BitmapFactory.Options options = new BitmapFactory.Options();
		options.inJustDecodeBounds = true;
		Bitmap mBitmap = BitmapFactory.decodeFile(f.getPath(), options);

		// Calculate inSampleSize
		options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);

		// Decode bitmap with inSampleSize set
		options.inJustDecodeBounds = false;
		
		int degree = readPictureDegree(path);
		if (degree <= 0) {
			return BitmapFactory.decodeFile(f.getPath(), options);
		} else {
			// Log.e(tag, "rotate:" + degree);
			// 创建操作图片是用的matrix对象
			Matrix matrix = new Matrix();
			// 旋转图片动作
			matrix.postRotate(degree);
			// 创建新图片
			
			mBitmap = BitmapFactory.decodeFile(f.getPath(), options);
			
			return Bitmap.createBitmap(mBitmap, 0, 0, mBitmap.getWidth(), mBitmap.getHeight(), matrix, true);
		}
		
	}

	/** 生成二维码QR图 **/
	public static Bitmap createImage(String str, int widthAndHeight) { // str:生成的文本
																		// iv:绑定的控件
																		// widthAndHeight:二维码宽高
		try {
			// 需要引入core包
			QRCodeWriter writer = new QRCodeWriter();

			if (str == null || "".equals(str) || str.length() < 1) {
				return null;
			}

			// 把输入的文本转为二维码
			BitMatrix martix = writer.encode(str, BarcodeFormat.QR_CODE, widthAndHeight, widthAndHeight);

			System.out.println("w:" + martix.getWidth() + "h:" + martix.getHeight());

			Hashtable<EncodeHintType, String> hints = new Hashtable<EncodeHintType, String>();
			hints.put(EncodeHintType.CHARACTER_SET, "utf-8");
			BitMatrix bitMatrix = new QRCodeWriter().encode(str, BarcodeFormat.QR_CODE, widthAndHeight, widthAndHeight, hints);
			int[] pixels = new int[widthAndHeight * widthAndHeight];
			for (int y = 0; y < widthAndHeight; y++) {
				for (int x = 0; x < widthAndHeight; x++) {
					if (bitMatrix.get(x, y)) {
						pixels[y * widthAndHeight + x] = 0xff000000;
					} else {
						pixels[y * widthAndHeight + x] = 0xffffffff;
					}

				}
			}
			Bitmap bitmap = Bitmap.createBitmap(widthAndHeight, widthAndHeight, Bitmap.Config.ARGB_8888);
			bitmap.setPixels(pixels, 0, widthAndHeight, 0, 0, widthAndHeight, widthAndHeight);
			return bitmap;
		} catch (WriterException e) {
			e.printStackTrace();
		}
		return null;

	}

	/**
	 * 读取照片exif信息中的旋转角度<br/>
	 * http://www.eoeandroid.com/thread-196978-1-1.html
	 * 
	 * @param path
	 *            照片路径
	 * @return角度
	 */
	public static int readPictureDegree(String path) {
		int degree = 0;
		try {
			ExifInterface exifInterface = new ExifInterface(path);
			int orientation = exifInterface.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);
			switch (orientation) {
			case ExifInterface.ORIENTATION_ROTATE_90:
				degree = 90;
				break;
			case ExifInterface.ORIENTATION_ROTATE_180:
				degree = 180;
				break;
			case ExifInterface.ORIENTATION_ROTATE_270:
				degree = 270;
				break;
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return degree;
	}

	// 计算应该缩小的倍率
	public static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {
		// Raw height and width of image
		final int height = options.outHeight;
		final int width = options.outWidth;
		int inSampleSize = 1;

		if (height > reqHeight || width > reqWidth) {

			final int halfHeight = height / 2;
			final int halfWidth = width / 2;

			// Calculate the largest inSampleSize value that is a power of 2 and
			// keeps both
			// height and width larger than the requested height and width.
			while ((halfHeight / inSampleSize) > reqHeight && (halfWidth / inSampleSize) > reqWidth) {
				inSampleSize *= 2;
			}
		}

		return inSampleSize;
	}
}
