package com.hwc.member.view.fragment;

import android.app.Activity;
import android.content.Intent;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;

import com.huimodel.api.base.Order;
import com.hwc.member.R;
import com.hwc.member.adapter.MyOrderAdapter;
import com.hwc.member.presenter.AllOrderPresenter;
import com.hwc.member.view.activity.order.OrderDetailsActivity;
import com.hwc.member.view.activity.order.PreferentialOrderDetailActivity;
import com.hwc.member.view.activity.view.IAllOrderView;
import com.hwc.member.view.base.FormBaseFragment;
import com.hwc.member.widget.PullToRefreshFooter;
import com.hwc.member.widget.PullToRefreshHeadView;
import com.lidroid.xutils.view.annotation.ViewInject;

import java.util.ArrayList;
import java.util.List;

import in.srain.cube.views.loadmore.LoadMoreContainer;
import in.srain.cube.views.loadmore.LoadMoreHandler;
import in.srain.cube.views.loadmore.LoadMoreListViewContainer;
import in.srain.cube.views.ptr.PtrDefaultHandler;
import in.srain.cube.views.ptr.PtrFrameLayout;
import in.srain.cube.views.ptr.PtrHandler;

/**
 * Created by Azeng on 2016/4/27.
 */
public class NewOrderFragment extends FormBaseFragment implements IAllOrderView {

    @ViewInject(R.id.load_more_list_view_ptr_frame)
    private PtrFrameLayout mPtrFrameLayout;

    @ViewInject(R.id.load_more_container)
    LoadMoreListViewContainer load_more_container;

    @ViewInject(R.id.listview)
    private ListView mListView;

    @ViewInject(R.id.nodata_page)
    private View nodata_page;
    @ViewInject(R.id.nodata_tv)
    private TextView nodata_tv;
    @ViewInject(R.id.nodata_but)
    private Button nodata_but;


    private List<Order> moreList;


    private MyOrderAdapter myOrderAdapter;

    private AllOrderPresenter presenter = new AllOrderPresenter(this);

    private int tag = 1;
    private int mIndex = 1;

    private boolean isFirst = true;
    protected boolean isVisible;
    private boolean isPrepared = false;

    @Override
    protected void init() {
        moreList = new ArrayList<Order>();
        myOrderAdapter = new MyOrderAdapter(getContext(), moreList, R.layout.item_order, null);
        mListView.setAdapter(myOrderAdapter);
    }

    public static NewOrderFragment newInstance(int tag) {

        NewOrderFragment fragment = new NewOrderFragment();
        fragment.tag = tag;
        return fragment;
    }

    @Override
    public void setUserVisibleHint(boolean isVisibleToUser) {
        super.setUserVisibleHint(isVisibleToUser);
        if (getUserVisibleHint()) {
            isVisible = true;
            onVisible();
        } else {
            isVisible = false;
        }


    }

    protected void onVisible() {
        lazyLoad();
    }

    private void lazyLoad() {
        if (!isPrepared || !isVisible || !isFirst) {
            return;
        }
        //填充各控件的数据
        showProgressDialog(null);
        presenter.refresh(tag);
        isFirst = false;
    }


    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == Activity.RESULT_OK) {
            mPtrFrameLayout.postDelayed(new Runnable() {
                @Override
                public void run() {
                    mPtrFrameLayout.autoRefresh(false);
                }
            }, 0);
		}
    }

    @Override
    public void initListener() {
        super.initListener();
//        mPtrFrameLayout.setLoadingMinTime(500);
        PullToRefreshHeadView headView = new PullToRefreshHeadView(getContext());
        headView.setLastUpdateTimeKey(this.getClass().getSimpleName() + tag);
        mPtrFrameLayout.setHeaderView(headView);
        mPtrFrameLayout.addPtrUIHandler(headView);
        mPtrFrameLayout.setPtrHandler(new PtrHandler() {
            @Override
            public boolean checkCanDoRefresh(PtrFrameLayout frame, View content, View header) {

                return PtrDefaultHandler.checkContentCanBePulledDown(frame, mListView, header);
            }

            @Override
            public void onRefreshBegin(PtrFrameLayout frame) {
                presenter.refresh(tag);
            }
        });

        load_more_container.setAutoLoadMore(true);
        PullToRefreshFooter footer = new PullToRefreshFooter(getContext());
        load_more_container.setLoadMoreView(footer);
        load_more_container.setLoadMoreUIHandler(footer);

        // binding view and data
        load_more_container.setLoadMoreHandler(new LoadMoreHandler() {
            @Override
            public void onLoadMore(LoadMoreContainer loadMoreContainer) {
                mIndex++;
                presenter.more(tag, mIndex);
            }
        });

        isPrepared = true;
        lazyLoad();
        mListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // TODO Auto-generated method stub
                if (myOrderAdapter.getItem(position).getTradefrom().equals("FACEPAY")) {
                    goTo(PreferentialOrderDetailActivity.class, moreList.get(position).getRid());
                } else {
                    goToForResult(OrderDetailsActivity.class, moreList.get(position).getRid());
                }
            }
        });
    }

    @Override
    public int getLayoutId() {
        return R.layout.fragment_new_order;
    }

    @Override
    public void refresh(List<Order> list) {
        GONE(nodata_page);
        VISIBLE(load_more_container);
        if (moreList == null) {
            moreList = new ArrayList<Order>();
        }
        moreList.clear();
        moreList.addAll(list);
        myOrderAdapter.notifyDataSetChanged();
        mPtrFrameLayout.refreshComplete();
        // load more
        if (moreList.size() <= 0) {
            setNodataPage();
        } else if (moreList.size() < 10) {
            load_more_container.loadMoreFinish(true, false);
        } else {
            load_more_container.loadMoreFinish(false, true);
        }
        mIndex = 1;
    }

    @Override
    public void more(List<Order> list, boolean hasMore) {
        moreList.addAll(list);
        mPtrFrameLayout.refreshComplete();
        // load more
        load_more_container.loadMoreFinish(false, hasMore);
        myOrderAdapter.notifyDataSetChanged();
    }

    @Override
    public void setNodataPage() {
        VISIBLE(nodata_page);
        GONE(load_more_container);
        nodata_tv.setText("还没有订单呢");
        INVISIBLE(nodata_but);
    }

    @Override
    public void clearLoadPage() {

    }

    @Override
    public void showErrorPage() {

    }
}
