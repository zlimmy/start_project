/**
 * 
 */
package com.hwc.member.widget;

import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import android.widget.EditText;

/**
 * @author FZ
 * @date 2015-9-16
 */
public class EditDelText extends EditText {

	private Drawable dRight;
	private Rect rBounds;

	public EditDelText(Context context) {
		super(context);
		init();
	}

	public EditDelText(Context paramContext, AttributeSet paramAttributeSet) {
		super(paramContext, paramAttributeSet);
		init();
	}

	public EditDelText(Context paramContext, AttributeSet paramAttributeSet,
			int paramInt) {
		super(paramContext, paramAttributeSet, paramInt);
		init();
	}

	private void init() {
		if (hasFocus()) {
			setDeleteDrawable();
		} else {
			setCompoundDrawables(null, null, null, null);
		}
		addTextChangedListener(new TextWatcher() { // ���ı����ݸı���м���
			public void afterTextChanged(Editable paramEditable) {
			}

			public void beforeTextChanged(CharSequence paramCharSequence,
					int paramInt1, int paramInt2, int paramInt3) {
			}

			public void onTextChanged(CharSequence paramCharSequence,
					int paramInt1, int paramInt2, int paramInt3) {
				if (hasFocus()) {
					setDeleteDrawable();
				} else {
					setCompoundDrawables(null, null, null, null);
				}
			}
		});

	}

	@Override
	protected void onFocusChanged(boolean focused, int direction,
			Rect previouslyFocusedRect) {
		super.onFocusChanged(focused, direction, previouslyFocusedRect);
		if (focused) {
			setDeleteDrawable();
		} else {
			setCompoundDrawables(null, null, null, null);
		}
	}

	private void setDeleteDrawable() {
		if (getText().toString().length() == 0) {
			setCompoundDrawables(null, null, null, null);
		} else {
			setCompoundDrawables(null, null, this.dRight, null);
		}
	}

	protected void finalize() throws Throwable {
		super.finalize();
		this.dRight = null;
		this.rBounds = null;
	}

	@SuppressLint("ClickableViewAccessibility")
	public boolean onTouchEvent(MotionEvent paramMotionEvent) {
		if (!hasFocus()) {
			return super.onTouchEvent(paramMotionEvent);
		}
		if ((this.dRight != null) && (paramMotionEvent.getAction() == 1)) {
			this.rBounds = this.dRight.getBounds();
			int i = (int) paramMotionEvent.getX();
			int j = getRight() - 5 * this.rBounds.width();
			if (i > j) {
				setText("");
				paramMotionEvent.setAction(MotionEvent.ACTION_CANCEL);
			}
		}
		return super.onTouchEvent(paramMotionEvent);
	}

	public void setCompoundDrawables(Drawable paramDrawable1,
			Drawable paramDrawable2, Drawable paramDrawable3,
			Drawable paramDrawable4) {
		if (paramDrawable3 != null)
			this.dRight = paramDrawable3;
		super.setCompoundDrawables(paramDrawable1, paramDrawable2,
				paramDrawable3, paramDrawable4);
	}
	
	@SuppressWarnings("unused")
	private OnFocusChangeListener mOnFocusChangeListener = new OnFocusChangeListener() {
	      @Override
	      public void onFocusChange(View v, boolean hasFocus)
	      {
	          EditText textView = (EditText)v;
	          String hint;
	          if (hasFocus) {
	              hint = textView.getHint().toString();
	              textView.setTag(hint);
	              textView.setHint("");
	          } else {
	              hint = textView.getTag().toString();
	              textView.setHint(hint);
	          }
	      }
	  };

}
