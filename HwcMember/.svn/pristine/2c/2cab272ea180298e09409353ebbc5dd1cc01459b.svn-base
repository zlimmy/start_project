package com.hwc.member.view.activity.my;

import android.annotation.SuppressLint;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;
import android.view.Gravity;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RadioGroup.OnCheckedChangeListener;
import android.widget.TextView;

import com.aliyun.mbaas.oss.storage.OSSBucket;
import com.huimodel.api.response.PayTypeResponse;
import com.huimodel.api.response.UserLoginResponse;
import com.hwc.member.R;
import com.hwc.member.common.Constant;
import com.hwc.member.common.Member;
import com.hwc.member.presenter.UpdateInfoPresenter;
import com.hwc.member.util.AvatarObtain;
import com.hwc.member.util.AvatarObtain.AvatarObtainCallback;
import com.hwc.member.util.BitmapUtil;
import com.hwc.member.util.DialogUtil;
import com.hwc.member.util.OSSUtil;
import com.hwc.member.util.OSSUtil.Callback;
import com.hwc.member.util.UtilPhone;
import com.hwc.member.view.activity.view.IUpdateInfoView;
import com.hwc.member.view.base.BaseActivity;
import com.hwc.member.widget.CircleImageView;
import com.hwc.member.widget.SimpleHUD;
import com.hwc.member.widget.header.HeadView.Dir;
import com.hwc.member.widget.header.HeadView.OnHeadClickListener;
import com.hwc.member.widget.header.LXHeadView;
import com.lidroid.xutils.BitmapUtils;
import com.lidroid.xutils.bitmap.BitmapDisplayConfig;
import com.lidroid.xutils.bitmap.core.BitmapSize;
import com.lidroid.xutils.view.annotation.ContentView;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.lidroid.xutils.view.annotation.event.OnClick;

import java.util.Calendar;

/** 
 * 编辑个人信息
 * @author Administrator
 */
@ContentView(R.layout.activity_update_info)
public class UpdateInfoActivity extends BaseActivity implements IUpdateInfoView {
	
	@ViewInject(R.id.header)
	private LXHeadView header;
	@ViewInject(R.id.head_iv)
	private CircleImageView head_iv;
	@ViewInject(R.id.user_et)
	private EditText user_et;
	@ViewInject(R.id.realname_et)
	private EditText realname_et;
	@ViewInject(R.id.birthday_tv)
	private TextView birthday_tv;
	@ViewInject(R.id.rg)
	private RadioGroup rg;
	@ViewInject(R.id.boy_rb)
	private RadioButton boy_rb;
	@ViewInject(R.id.girl_rb)
	private RadioButton girl_rb;
	@ViewInject(R.id.email_et)
	private EditText email_et;
	@ViewInject(R.id.phone_et)
	private EditText phone_et;
	@ViewInject(R.id.ident_et)
	private EditText ident_et;
	@ViewInject(R.id.address_et)
	private EditText address_et;
	@ViewInject(R.id.pay_et)
	private EditText pay_et;
	@ViewInject(R.id.paytype_rg)
	private RadioGroup paytype_rg;
	private int payway = -1;
	private PayTypeResponse paytype;
	
	private RetPhotoPW menuWindow;
	private AvatarObtain obtain;
	
	private UpdateInfoPresenter presenter = new UpdateInfoPresenter(this);
	private OSSUtil ossUtil;
	private OSSBucket bucket;
	
	private String sexstr = "F";
	
	private static final int SHOW_DATAPICK = 0;
    private static final int DATE_DIALOG_ID = 1; 
     
    private int mYear; 
    private int mMonth;
    private int mDay;
   
    protected BitmapUtils utils;
    
    private boolean hasChosenPic = false;
	
	@Override
	protected void initView() {
		setBack();
		ossUtil = OSSUtil.getInstance();
		ossUtil.initOSS(getApplicationContext());
		bucket = ossUtil.getBucket();
		
		utils = new BitmapUtils(context);
		utils.configDefaultLoadingImage(R.drawable.user_photo);
		utils.configDefaultLoadFailedImage(R.drawable.user_photo);
		if(!TextUtils.isEmpty(Member.getInstance().getAvatar())){
			BitmapDisplayConfig  congfig = new BitmapDisplayConfig();
			congfig.setBitmapMaxSize(new BitmapSize(500, 500));
			utils.display(head_iv, Member.getInstance().getAvatar(),congfig);
		}
		user_et.setText(Member.getInstance().getNick());
		
		presenter.getPayWay();
//		presenter.getMember();		
		
		final Calendar c = Calendar.getInstance();
        mYear = c.get(Calendar.YEAR); 
        mMonth = c.get(Calendar.MONTH); 
        mDay = c.get(Calendar.DAY_OF_MONTH);
        LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);  
		lp.setMargins(0, 0, 20, 0);  
		header.rightText().setLayoutParams(lp);
	}

	@Override
	protected void initListener() {
		obtain = new AvatarObtain(this, new AvatarObtainCallback() {
			
			@Override
			public void obtainAvatarSuccess(String path) {
				head_iv.setImageBitmap(BitmapUtil.decodeSampledBitmapFromResource(path,400,400));
			
				try {
//					ossUtil.doUpload(bucket, Constant.USERIMG, BitmapUtil.getBitmap(path));
					ossUtil.doUpload(bucket, Constant.USERIMG, BitmapUtil.decodeSampledBitmapFromResource(path,720,720));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			
			@Override
			public void obtainAvatarFailure() {
				SimpleHUD.showSuccessMessage(UpdateInfoActivity.this, "failure");
			}
		});
		ossUtil.registerCallback(new Callback() {
			
			@Override
			public void Success(Bundle bundle) {
				hasChosenPic  = true;
				SimpleHUD.showSuccessMessage(context, "上传成功");
				bitmapUtils.clearCache(Constant.OSSURL + Constant.USERIMG);
			}
			
			@Override
			public void Failure(Bundle bundle) {
				SimpleHUD.showErrorMessage(context, "上传失败，请校准时间");
			}
		});
		rg.setOnCheckedChangeListener(new OnCheckedChangeListener() {
			
			@Override
			public void onCheckedChanged(RadioGroup group, int checkedId) {
				switch (checkedId) {
				case R.id.boy_rb:
					sexstr = "F";
					break;
				case R.id.girl_rb:
					sexstr = "M";
					break;
				default:
					break;
				}
			}
		});
		birthday_tv.setOnClickListener(new View.OnClickListener() {
            
            @Override
            public void onClick(View v) {
               Message msg = new Message();
               msg.what = UpdateInfoActivity.SHOW_DATAPICK; 
               UpdateInfoActivity.this.dateandtimeHandler.sendMessage(msg);
            }
        });
		header.setOnHeadClickListener(new OnHeadClickListener() {
			
			@Override
			public void onHeadClick(Dir dir, View view) {
				switch (dir) {
				case Right:
					forgetDis();
					break;

				default:
					break;
				}
			}
		});
	}
	
	
	public void forgetDis(){
		if(isEmpty(getViewValue(user_et))){
			SimpleHUD.showInfoMessage(context, "昵称不能为空");
			return;
		}
		if(!getViewValue(email_et).equals("")){
			if(!UtilPhone.isEmail(getViewValue(email_et))){
				SimpleHUD.showInfoMessage(context, "请输入正确的邮箱");
				return;
			}
		}
		if(!getViewValue(phone_et).equals("")){
			if(!UtilPhone.isMobileNO(getViewValue(phone_et))){
				SimpleHUD.showInfoMessage(context, "请输入正确的联系号码");
				return;
			}
		}
		if(!getViewValue(ident_et).equals("")){
			if(!UtilPhone.isIDcard(getViewValue(ident_et))){
				SimpleHUD.showInfoMessage(context, "请输入正确的身份证号码");
				return;
			}
		}
		String pay_type = null;
		if(payway != -1){
			pay_type = paytype.getEntities().get(payway).getCode();
		}else{
			pay_type = null;
		}

		
		
		if(hasChosenPic){
			presenter.update(getViewValue(user_et), Constant.OSSURL + Constant.USERIMG, getViewValue(realname_et), getViewValue(birthday_tv), sexstr, getViewValue(email_et), getViewValue(phone_et), getViewValue(ident_et), getViewValue(address_et), pay_type, getViewValue(pay_et));
			
		}else {
			presenter.update(getViewValue(user_et),Member.getInstance().getAvatar() , getViewValue(realname_et), getViewValue(birthday_tv), sexstr, getViewValue(email_et), getViewValue(phone_et), getViewValue(ident_et), getViewValue(address_et), pay_type, getViewValue(pay_et));
		}
	} 	

	
	@OnClick(R.id.head_iv)
	public void showBigPhoto(View v){
		Bitmap bitmap = ((BitmapDrawable)head_iv.getDrawable()).getBitmap();
		if(bitmap != null){
			DialogUtil.showImg(bitmap, this);
		}
	}
	
	@OnClick(R.id.user_ll0)
	public void selImg(View v){
		menuWindow = new RetPhotoPW(UpdateInfoActivity.this, itemsOnClick);
		menuWindow.showAtLocation(UpdateInfoActivity.this.findViewById(R.id.user_info_layout), Gravity.BOTTOM|Gravity.CENTER_HORIZONTAL, 0, 0);
	}
	
	private OnClickListener  itemsOnClick = new OnClickListener(){

		public void onClick(View v) {
			menuWindow.dismiss();
			switch (v.getId()) {
			case R.id.camera_but: //拍照
				obtain.getAvatarByCamera(false);	
				break;
			case R.id.album_but:	//从相册中选	
				obtain.getAvatarFromAlbum(false);
				break;
			default:
				break;
			}		
		} 	
    };
    
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		obtain.onActivityResult(requestCode, resultCode, data);
    }

	@Override
	public void clearLoadPage() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void showErrorPage() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void updataSuccess() {
		
		 new Handler().postDelayed(new Runnable(){  
		     public void run() {  
		    	 finish();
		     }  
		  }, 2000); 
	}

	@Override
	public void setData(UserLoginResponse userInfo) {
		if(userInfo.getReal_name() != null){
			realname_et.setText(userInfo.getReal_name());
		}
		if(userInfo.getSex() != null){
			if(userInfo.getSex().equals("F")){
				boy_rb.setChecked(true);
			}else{
				girl_rb.setChecked(true);
			}
		}
		if(userInfo.getEmail() != null){
			email_et.setText(userInfo.getEmail());
		}
		if(userInfo.getPhone() != null){
			phone_et.setText(userInfo.getPhone());
		}
		if(userInfo.getIdent() != null){
			ident_et.setText(userInfo.getIdent());
		}
		if(userInfo.getAddress() != null){
			address_et.setText(userInfo.getAddress());
		}
		if(userInfo.getPayaccount() != null){
			pay_et.setText(userInfo.getPayaccount());
		}
		if(userInfo.getBirthday() != null && !userInfo.getBirthday().equals("")){
			birthday_tv.setText(userInfo.getBirthday());
		}
		if(paytype != null){
			for (int i = 0; i < paytype.getEntities().size(); i++) {
				if(paytype.getEntities().get(i).getCode().equals(userInfo.getPay_type())){
					RadioButton rb = (RadioButton) findViewById(i);
					rb.setChecked(true);
				}
			}
		}
	}
     
    /**
     * 更新日期显示
     */
    private void updateDateDisplay(){
       birthday_tv.setText(mYear + "-" + (mMonth + 1) + "-" + mDay);
    }
     
    /**
     * 日期控件的事件
     */ 
    private DatePickerDialog.OnDateSetListener mDateSetListener = new DatePickerDialog.OnDateSetListener() { 
   
       public void onDateSet(DatePicker view, int year, int monthOfYear, 
              int dayOfMonth) { 
           mYear = year; 
           mMonth = monthOfYear; 
           mDay = dayOfMonth; 
 
           updateDateDisplay();
       } 
    };
	
	@Override 
    protected Dialog onCreateDialog(int id) { 
       switch (id) { 
       case DATE_DIALOG_ID: 
           return new DatePickerDialog(this, mDateSetListener, mYear, mMonth, 
                  mDay);
       }
            
       return null; 
    } 
   
    @Override 
    protected void onPrepareDialog(int id, Dialog dialog) { 
       switch (id) { 
       case DATE_DIALOG_ID: 
           ((DatePickerDialog) dialog).updateDate(mYear, mMonth, mDay); 
           break;
       }
    } 
	
	/**
     * 处理日期和时间控件的Handler
     */ 
    @SuppressLint("HandlerLeak")
	Handler dateandtimeHandler = new Handler() {
   
    @SuppressWarnings("deprecation")
	@Override 
       public void handleMessage(Message msg) { 
           switch (msg.what) { 
           case UpdateInfoActivity.SHOW_DATAPICK: 
               showDialog(DATE_DIALOG_ID); 
               break;
           } 
       } 
   
    };

    //根据支付途经的返回数据自动生成对应单选框
	@Override
	public void setRadio(PayTypeResponse obj) {
		paytype = obj;
		for (int i = 0; i < obj.getEntities().size(); i++) {
			RadioButton rb = new RadioButton(context);
			rb.setId(i);
			rb.setLayoutParams(new RadioGroup.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 1));
			rb.setText(obj.getEntities().get(i).getDescript());
			rb.setGravity(Gravity.CENTER);
			rb.setButtonDrawable(R.drawable.button_checkbox2);
			paytype_rg.addView(rb);
		}
		paytype_rg.setOnCheckedChangeListener(new OnCheckedChangeListener() {
			
			@Override
			public void onCheckedChanged(RadioGroup group, int checkedId) {
				payway = checkedId;
			}
		});
	}
     

}
