package com.hwc.member.view.activity;

import android.app.Activity;
import android.content.Intent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.Button;
import android.widget.RadioGroup.OnCheckedChangeListener;
import android.widget.TextView;

import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.mapapi.map.BaiduMap;
import com.baidu.mapapi.map.BaiduMap.OnMapLoadedCallback;
import com.baidu.mapapi.map.BaiduMap.OnMapStatusChangeListener;
import com.baidu.mapapi.map.BitmapDescriptor;
import com.baidu.mapapi.map.MapStatus;
import com.baidu.mapapi.map.MapStatusUpdate;
import com.baidu.mapapi.map.MapStatusUpdateFactory;
import com.baidu.mapapi.map.MapView;
import com.baidu.mapapi.map.MyLocationConfiguration;
import com.baidu.mapapi.map.MyLocationConfiguration.LocationMode;
import com.baidu.mapapi.map.MyLocationData;
import com.baidu.mapapi.model.LatLng;
import com.baidu.mapapi.search.core.SearchResult;
import com.baidu.mapapi.search.geocode.GeoCodeResult;
import com.baidu.mapapi.search.geocode.GeoCoder;
import com.baidu.mapapi.search.geocode.OnGetGeoCoderResultListener;
import com.baidu.mapapi.search.geocode.ReverseGeoCodeOption;
import com.baidu.mapapi.search.geocode.ReverseGeoCodeResult;
import com.hwc.member.R;
import com.hwc.member.util.LocationUtil;
import com.hwc.member.util.ViewTransformUtil;
import com.hwc.member.view.base.BaseActivity;
import com.hwc.member.widget.SimpleHUD;
import com.hwc.member.widget.header.HeadView.Dir;
import com.hwc.member.widget.header.HeadView.OnHeadClickListener;
import com.hwc.member.widget.header.LXHeadView;
import com.lidroid.xutils.view.annotation.ContentView;
import com.lidroid.xutils.view.annotation.ViewInject;
/**
 * 百度地图
 * @author FZ
 * @date 2015年9月6日
 */
@ContentView(R.layout.activity_map)
public class MapActivity extends BaseActivity {

	@ViewInject(R.id.header)
	private LXHeadView header;
	@ViewInject(R.id.addr_tv)
	private TextView addr_tv;
	private String addr;
	
	// 定位相关
	private LocationMode mCurrentMode;
	BitmapDescriptor mCurrentMarker;

	@ViewInject(R.id.bmapView)
	MapView mMapView;
	BaiduMap mBaiduMap;

	// UI相关
	OnCheckedChangeListener radioButtonListener;
	Button requestLocButton;
	boolean isFirstLoc = true;// 是否首次定位
	
	@Override
	protected void initView() {
		ViewTransformUtil.layoutParams(header, header.getLayoutParams(), LayoutParams.MATCH_PARENT, 90);
		setBack();
		initListener();
		
		requestLocButton = (Button) findViewById(R.id.join_im);
		mCurrentMode = LocationMode.NORMAL;
		requestLocButton.setText("普通");
		OnClickListener btnClickListener = new OnClickListener() {
			public void onClick(View v) {
				switch (mCurrentMode) {
				case NORMAL:
					requestLocButton.setText("跟随");
					mCurrentMode = LocationMode.FOLLOWING;
					mBaiduMap
							.setMyLocationConfigeration(new MyLocationConfiguration(
									mCurrentMode, true, mCurrentMarker));
					break;
				case COMPASS:
					requestLocButton.setText("普通");
					mCurrentMode = LocationMode.NORMAL;
					mBaiduMap
							.setMyLocationConfigeration(new MyLocationConfiguration(
									mCurrentMode, true, mCurrentMarker));
					break;
				case FOLLOWING:
					requestLocButton.setText("罗盘");
					mCurrentMode = LocationMode.COMPASS;
					mBaiduMap
							.setMyLocationConfigeration(new MyLocationConfiguration(
									mCurrentMode, true, mCurrentMarker));
					break;
				}
			}
		};
		requestLocButton.setOnClickListener(btnClickListener);

		// 地图初始化
		mBaiduMap = mMapView.getMap();
		// 开启定位图层
		mBaiduMap.setMyLocationEnabled(true);
		// 定位初始化
		LocationUtil.initLocation(this);
		LocationUtil.setLocationListener(new MyLocationListenner());
		LocationUtil.requestLocation(null);
	}
	
	public void initListener(){
		header.setOnHeadClickListener(new OnHeadClickListener() {
			
			@Override
			public void onHeadClick(Dir dir, View view) {
				switch (dir) {
				case Right:
					Intent intent = getIntent();
					intent.putExtra("addr", addr);
					MapActivity.this.setResult(Activity.RESULT_OK, intent);// 返回页面1
					finish();
					break;

				default:
					break;
				}
			}
		});
	}

	@Override
	public void onPause() {
		mMapView.onPause();
		super.onPause();
	}

	@Override
	public void onResume() {
		mMapView.onResume();
		super.onResume();
	}

	@Override
	protected void onDestroy() {
		// 关闭定位图层
		mBaiduMap.setMyLocationEnabled(false);
		mMapView.onDestroy();
		mMapView = null;
		super.onDestroy();
	}
	
	public void setMapStatus(LatLng l){
		//定义地图状态
        MapStatus mMapStatus = new MapStatus.Builder()
        .target(l)
        .zoom(14)
        .build();
        MapStatusUpdate mMapStatusUpdate = MapStatusUpdateFactory.newMapStatus(mMapStatus);
        //改变地图状态
        mBaiduMap.setMapStatus(mMapStatusUpdate);
		completeLis();
	}
	
	/**
	 * 定位SDK监听函数
	 */
	class MyLocationListenner implements BDLocationListener {

		@Override
		public void onReceiveLocation(BDLocation location) {
			// map view 销毁后不在处理新接收的位置
			if (location == null || mMapView == null)
				return;
			MyLocationData locData = new MyLocationData.Builder()
					.accuracy(location.getRadius())
					// 此处设置开发者获取到的方向信息，顺时针0-360
					.direction(100).latitude(location.getLatitude())
					.longitude(location.getLongitude()).build();
			mBaiduMap.setMyLocationData(locData);
			LatLng ll = null;
			if (isFirstLoc) {
				isFirstLoc = false;
				ll = new LatLng(location.getLatitude(),
						location.getLongitude());
				MapStatusUpdate u = MapStatusUpdateFactory.newLatLng(ll);
				mBaiduMap.animateMapStatus(u);
			}
			setMapStatus(ll);
		}

		public void onReceivePoi(BDLocation poiLocation) {
		}
	}
	
	public void completeLis(){
		mBaiduMap.setOnMapLoadedCallback(new OnMapLoadedCallback() {
			
			@Override
			public void onMapLoaded() {
				T("加载完成");
			}
		});
		mBaiduMap.setOnMapStatusChangeListener(new OnMapStatusChangeListener() {
			
			@Override
			public void onMapStatusChangeStart(MapStatus arg0) {
				
			}
			
			@Override
			public void onMapStatusChangeFinish(MapStatus arg0) {
				LatLng latlng = mBaiduMap.getMapStatus().target;
				System.out.println("*****************lat = " + latlng.latitude);
				System.out.println("*****************lng = " + latlng.longitude);
//				TToast("纬度："+latlng.latitude+"---经度："+latlng.longitude);
				// 创建地理编码检索实例  
		        GeoCoder geoCoder = GeoCoder.newInstance();  
		        //  
		        OnGetGeoCoderResultListener listener = new OnGetGeoCoderResultListener() {  
		            // 反地理编码查询结果回调函数  
		            @Override  
		            public void onGetReverseGeoCodeResult(ReverseGeoCodeResult result) {  
		                if (result == null  
		                        || result.error != SearchResult.ERRORNO.NO_ERROR) {  
		                    // 没有检测到结果  
		                    SimpleHUD.showErrorMessage(context, "抱歉，未能找到结果");
		                }  
		                addr_tv.setText(result.getAddress());
		                addr = result.getAddress();
		            }  
		  
		            // 地理编码查询结果回调函数  
		            @Override  
		            public void onGetGeoCodeResult(GeoCodeResult result) {  
		                if (result == null  
		                        || result.error != SearchResult.ERRORNO.NO_ERROR) {  
		                    // 没有检测到结果  
		                }  
		            }  
		        };  
		        // 设置地理编码检索监听者  
		        geoCoder.setOnGetGeoCodeResultListener(listener);  
		        //  
		        geoCoder.reverseGeoCode(new ReverseGeoCodeOption().location(latlng));  
		        // 释放地理编码检索实例  
		        // geoCoder.destroy();  
			}
			
			@Override
			public void onMapStatusChange(MapStatus arg0) {
				// TODO Auto-generated method stub
				
			}
		});
	}

}
