package com.hwc.member.service;

import java.lang.reflect.InvocationTargetException;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import android.annotation.SuppressLint;
import android.app.ActivityManager;
import android.app.ActivityManager.RunningTaskInfo;
import android.app.Service;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.support.v4.app.Fragment.InstantiationException;

import com.hwc.member.common.Constant;
import com.hwc.member.util.LogsUtil;

/**
 * 后台开启服务定时检测 防止被杀
 */
public class CheckService extends Service {
	private static final String TAG="CheckService";
	private static final String ProcessName = "com.hwc.member"; 
	@Override
	public IBinder onBind(Intent arg0) {
	
		return null;
	}

	/* (non-Javadoc)
	 * @see android.app.Service#onCreate()
	 */
	@Override
	public void onCreate() {
		LogsUtil.i(TAG, "检测服务启动---->>>> ");
		taskMail = new TimerTask() {  
		    @Override 
		    public void run() {  
		      
		        Message message = new Message();  
		        message.what = 1;  
		        handlerMail.sendMessage(message);  
		    }  
		};
		timerMail.schedule(taskMail, 15000, 5000); 
		
		
		super.onCreate();
	}
	private final Timer timerMail = new Timer();  
	private TimerTask taskMail;  
	@SuppressLint("HandlerLeak")
	Handler handlerMail = new Handler() {  
	    @Override 
	    public void handleMessage(Message msg) {  
	        try {
	        	boolean is=isBackgroundRunning();
	        	//getTopActivity();
	        	//LogsUtil.i(TAG, "应用:"+ProcessName+" is "+is);
	        	if(!is){
	        		/**
	        		 * 发送广播通知应用启动
	        		 */
	        		if(checkPackage()){
	        			 Intent myIntent = new Intent(Constant.RESOFTWARE_RECEIVER);  
		       			 myIntent.putExtra("start_code",Constant.start_code);
		       			 myIntent.setAction(Constant.RESOFTWARE_RECEIVER);  
		       			 sendBroadcast(myIntent);  
	        		}
	       			 
	        	}
			} catch (Exception e) {
				
				e.printStackTrace();
			}
	    } 
	};
	ActivityManager activityManager=null;
	PackageManager packageManager=null;
    PackageInfo pi = null;   
    /**
     * 检测package是否存在<br>
     * 2014-8-26 下午3:58:49
     * @return
     *
     */
	  public boolean checkPackage() {
		  boolean flag=false;
		   packageManager = getPackageManager(); 
	      try { 
              pi = packageManager.getPackageInfo(ProcessName, 0); 
              if(null!=pi){
            	  flag=true;
              }
          } catch (NameNotFoundException e) { 
        	  flag=false;
        	  LogsUtil.e(TAG, "出现异常", e);
          } 
          
		  return flag;
	  }
	  /**
	     * 检测package是否在运行<br>
	     * 2014-8-26 下午3:58:49
	     * @return
	     *
	     */
	private boolean isBackgroundRunning() {
		
		 activityManager = (ActivityManager) getSystemService(ACTIVITY_SERVICE);
		
		if (activityManager == null) return false;
			// get running tasks processes
			List<ActivityManager.RunningTaskInfo> processList = activityManager.getRunningTasks(100);
			for (ActivityManager.RunningTaskInfo info : processList) {
				if (info.topActivity.getPackageName().startsWith(ProcessName)) {
					return true;
				}
			}
			return false;
		}
	/* (non-Javadoc)
	 * @see android.app.Service#onDestroy()
	 */
	@Override
	public void onDestroy() {
		
	     try { 
	    	 /**
	    	  * 释放资源
	    	  */
	    	 if(taskMail!=null){
	    		 taskMail.cancel();
	    	 }
	    	 if(timerMail!=null){
	    		 timerMail.cancel();
	    	 }
         } catch (Exception e) { 
       	  LogsUtil.e(TAG, "出现异常", e);
         } 
         
		super.onDestroy();
	}

	
	
	//检测当前在允许的app并且获取里面的方法（应用范围很广的，只要获取ComponentName 就能做好多东西 ）
	  private void getTopActivity() {

	        ActivityManager manager = (ActivityManager) getSystemService(ACTIVITY_SERVICE);
	        List<RunningTaskInfo> runningTaskInfos = manager.getRunningTasks(1);

	        if (runningTaskInfos != null) {
	            ComponentName cn = runningTaskInfos.get(0).topActivity;
	            LogsUtil.d(TAG, "pkg:" + cn.getPackageName());//包名
	            LogsUtil.d(TAG, "cls:" + cn.getClassName());//类名

	            try {
	                Context c = createPackageContext(cn.getPackageName(),Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY);
	                // 载入这个类
	                Class clazz = c.getClassLoader().loadClass(cn.getClassName());
	                // 新建一个实例
	                Object owner = clazz.newInstance();
	                // 获取print方法，传入参数并执行
	                Object obj = clazz.getMethod("print", String.class).invoke(owner, "Hello");
	            } catch (NameNotFoundException e) {
	                e.printStackTrace();
	            } catch (ClassNotFoundException e) {
	                e.printStackTrace();
	            } catch (InstantiationException e) {
	                e.printStackTrace();
	            } catch (IllegalAccessException e) {
	                e.printStackTrace();
	            } catch (IllegalArgumentException e) {
	                e.printStackTrace();
	            } catch (InvocationTargetException e) {
	                e.printStackTrace();
	            } catch (NoSuchMethodException e) {
	                e.printStackTrace();
	            } catch (java.lang.InstantiationException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	        } else {
	        }
	    }
	
}
