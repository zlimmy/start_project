/**
 * 
 */
package com.hwc.member.application;

import android.app.Application;
import android.app.PendingIntent;
import android.app.PendingIntent.CanceledException;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap.Config;
import android.location.LocationManager;
import android.net.Uri;
import android.widget.Toast;

import com.baidu.mapapi.SDKInitializer;
import com.huimodel.api.base.BaseBitmap;
import com.hwc.member.R;
import com.hwc.member.bean.MLocation;
import com.hwc.member.common.Constant;
import com.hwc.member.common.Member;
import com.hwc.member.db.DBHelper;
import com.hwc.member.util.ACache;
import com.hwc.member.util.CommonUtils;
import com.hwc.member.util.FileUtils;
import com.hwc.member.util.GeTuiUtil;
import com.hwc.member.util.LocationUtil;
import com.hwc.member.util.LogsUtil;
import com.hwc.member.util.ScreenUtil;
import com.lidroid.xutils.BitmapUtils;
import com.lidroid.xutils.DbUtils;
import com.lidroid.xutils.exception.DbException;
import com.umeng.analytics.MobclickAgent;

/**
 * @author FZ
 */
public class App extends Application {

	public static Context mContext;
	public ACache aCache;
	public static BitmapUtils bitmapUtils;
	public  DbUtils db;
	@Override
	public void onCreate() {
		super.onCreate();
		mContext = getApplicationContext();
		aCache = ACache.get(mContext);
		initScreenInfo();
		initFile();
		MobclickAgent.openActivityDurationTrack(false);
		SDKInitializer.initialize(this);
		LocationUtil.initLocation(this);
		bitmapUtils = BaseBitmap.getBitmapUtils(getApplicationContext());
		bitmapUtils.configDefaultBitmapConfig(Config.ARGB_8888);
		bitmapUtils.configDefaultLoadingImage(R.drawable.icon_defultbg);
		bitmapUtils.configDefaultLoadFailedImage(R.drawable.icon_defultbg);
		bitmapUtils.configDefaultBitmapMaxSize(480, 854);
		create_DB();
		DBHelper.init(getApplicationContext());
		DBHelper.getInstance();
		Constant.IMEI = CommonUtils.getImei();
		if(!Member.isNull()){
			GeTuiUtil.bindAlias(mContext, "alias_" + Member.getInstance().getMobile());
		}

		Constant.device_number = android.os.Build.MODEL;
		Constant.os_version = android.os.Build.VERSION.RELEASE;

	}

	/**
	 * 初始化屏幕大小 
	 */
	 public void initScreenInfo(){
	    ScreenUtil.getInfo(getApplicationContext(), 720,1280);
	 }
	 
	 
	 /**
	  * 创建本地数据库
	  */
	 public void create_DB(){
		db = DbUtils.create(mContext,Constant.dbName);
		try {
			db.createTableIfNotExist(MLocation.class);//创建位置表
		} catch (DbException e) {
			LogsUtil.e("App", "创建位置表失败", e);
		}
	 }
	 
	 public DbUtils getDB(){
		 return db;
	 }
	 
	 
	 
	 /**
	  * 初始化文件夹
	  */
	 public void initFile(){
		System.out.println("---"+ FileUtils.makeDirs(Constant.rootFilePatch));
		System.out.println("---"+ FileUtils.makeDirs(Constant.cacheFilePatch));
		System.out.println("---"+ FileUtils.makeDirs(Constant.plugFilePatch));
	 }
	    
	    /** 
      * 判断GPS是否开启，GPS或者AGPS开启一个就认为是开启的 
      * @param context 
      * @return true 表示开启 
      */  
     public static final boolean isOPenGps(final Context context) {  
         LocationManager locationManager   = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);  
         // 通过GPS卫星定位，定位级别可以精确到街（通过24颗卫星定位，在室外和空旷的地方定位准确、速度快）  
         boolean gps = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);  
         // 通过WLAN或移动网络(3G/2G)确定的位置（也称作AGPS，辅助GPS定位。主要用于在室内或遮盖物（建筑群或茂密的深林等）密集的地方定位）  
         boolean network = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);
		 return gps || network;

	 }
     
     /** 
      * 强制帮用户打开GPS 
      * @param context 
      */  
     public static final void openGPS(Context context) {  
         Intent GPSIntent = new Intent();  
         GPSIntent.setClassName("com.android.settings",  
                 "com.android.settings.widget.SettingsAppWidgetProvider");  
         GPSIntent.addCategory("android.intent.category.ALTERNATIVE");  
         GPSIntent.setData(Uri.parse("custom:3"));  
         try {  
             PendingIntent.getBroadcast(context, 0, GPSIntent, 0).send();  
             Toast.makeText(mContext, "强制打开定位", 1111).show();
         } catch (CanceledException e) {  
             e.printStackTrace();  
         }  
     }  
}
