/**
 * 
 */
package com.hwc.member.util;

import java.util.List;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.graphics.Bitmap;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentTransaction;
import android.text.Html;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.huimodel.api.base.DPrizeCoupon;
import com.huimodel.api.base.DProduct;
import com.hwc.member.R;
import com.hwc.member.adapter.LoactionAdapter;
import com.hwc.member.adapter.MyCouponsAdapter;
import com.hwc.member.adapter.SimpleAdapter;
import com.hwc.member.common.Constant;
import com.hwc.member.view.activity.order.ConfirmOrderActivity;
import com.hwc.member.view.activity.view.IProductInfoView;
import com.hwc.member.widget.AddAndSubView;
import com.hwc.member.widget.AddAndSubView.OnNumChangeListener;
import com.hwc.member.widget.CustomDialogFragment;
import com.hwc.member.widget.RabbitCustomDialog;
import com.hwc.member.widget.dialogplus.BuyGridHolder;
import com.hwc.member.widget.dialogplus.DialogPlus;
import com.hwc.member.widget.dialogplus.GridHolder;
import com.hwc.member.widget.dialogplus.Holder;
import com.hwc.member.widget.dialogplus.ListHolder;
import com.hwc.member.widget.dialogplus.OnClickListener;
import com.hwc.member.widget.dialogplus.OnItemClickListener;
import com.hwc.member.widget.dialogplus.ViewHolder;
import com.hwc.member.widget.photodialog.CustomDialog;
import com.hwc.member.widget.photodialog.PayDialog;
import com.hwc.member.widget.photodialog.ViewArea;
import com.lidroid.xutils.BitmapUtils;

/**
 * @author FZ
 */
@SuppressLint("InflateParams")
public class DialogUtil {
	private static AddAndSubView addAndSubView;

	/**
	 * type:Dialog种类 str:普通dialog显示文本，list和grid传null
	 * adapter:list和grid穿入适配器，普通传null click:重写确定取消按钮监听
	 * itemClick:重写List和GridDialog的Item监听
	 **/
	public static void showDialog(int type, String str, int gravity, final Context context, SimpleAdapter adapter, OnClickListener click,
			OnItemClickListener itemClick) {
		boolean isCancelable;
		Holder holder;
		switch (type) {
		case 0:
			holder = new ViewHolder(R.layout.content2, str);
			isCancelable = false;
			break;
		case 1:
			holder = new ListHolder();
			isCancelable = true;
			break;
		default:
			holder = new GridHolder(3);
			isCancelable = true;
		}
		OnClickListener clickListener = new OnClickListener() {
			@Override
			public void onClick(DialogPlus dialog, View view) {
				switch (view.getId()) {
				case R.id.cancel:
					Toast.makeText(context, "取消", Toast.LENGTH_LONG).show();
					break;
				case R.id.confirm:
					Toast.makeText(context, "确定", Toast.LENGTH_LONG).show();
					break;
				}
				dialog.dismiss();
			}
		};
		if (click != null) {
			clickListener = click;
		}

		OnItemClickListener itemClickListener = new OnItemClickListener() {
			@Override
			public void onItemClick(DialogPlus dialog, Object item, View view, int position) {
				TextView textView = (TextView) view.findViewById(R.id.text_view);
				String clickedAppName = textView.getText().toString();
				dialog.dismiss();
				Toast.makeText(context, clickedAppName + " clicked", Toast.LENGTH_LONG).show();
			}
		};
		if (itemClick != null) {
			itemClickListener = itemClick;
		}

		showOnlyContentDialog(holder, gravity, adapter, clickListener, itemClickListener, isCancelable, context, null);
	}

	/**
	 * type:Dialog种类 str:普通dialog显示文本，list和grid传null
	 * adapter:list和grid穿入适配器，普通传null click:重写确定取消按钮监听
	 * itemClick:重写List和GridDialog的Item监听
	 **/
	public static void showDialogForLoaction(int type, String str, int gravity, final Context context, LoactionAdapter adapter,
			OnClickListener click, OnItemClickListener itemClick) {
		boolean isCancelable;
		Holder holder;
		switch (type) {
		case 0:
			holder = new ViewHolder(R.layout.content, str);
			isCancelable = false;
			break;
		case 1:
			holder = new ListHolder();
			isCancelable = true;
			break;
		default:
			holder = new GridHolder(3);
			isCancelable = true;
		}

		OnClickListener clickListener = new OnClickListener() {
			@Override
			public void onClick(DialogPlus dialog, View view) {
				switch (view.getId()) {
				case R.id.cancel:
					Toast.makeText(context, "取消", Toast.LENGTH_LONG).show();
					break;
				case R.id.confirm:
					Toast.makeText(context, "确定", Toast.LENGTH_LONG).show();
					break;
				}
				dialog.dismiss();
			}
		};
		if (click != null) {
			clickListener = click;
		}

		OnItemClickListener itemClickListener = new OnItemClickListener() {
			@Override
			public void onItemClick(DialogPlus dialog, Object item, View view, int position) {
				TextView textView = (TextView) view.findViewById(R.id.text_view);
				String clickedAppName = textView.getText().toString();
				dialog.dismiss();
				Toast.makeText(context, clickedAppName + " clicked", Toast.LENGTH_LONG).show();
			}
		};
		if (itemClick != null) {
			itemClickListener = itemClick;
		}

		View footer = LayoutInflater.from(context).inflate(R.layout.dialog_list_footer, null);
		TextView footer_bt = (TextView) footer.findViewById(R.id.confirm);
		footer_bt.setText("使用当前定位地址：" + str);

		showOnlyContentDialog(holder, gravity, adapter, clickListener, itemClickListener, isCancelable, context, footer);
	}

	private static void showOnlyContentDialog(Holder holder, int gravity, BaseAdapter adapter, OnClickListener clickListener,
			OnItemClickListener itemClickListener, boolean isCancelable, Context context, View footer) {
		DialogPlus dialog = null;
		if (isCancelable) {
			if (footer == null) {
				dialog = DialogPlus.newDialog(context).setContentHolder(holder).setGravity(gravity).setAdapter(adapter)
						.setOnClickListener(clickListener).setOnItemClickListener(itemClickListener).setExpanded(false)
						.setHeader(R.layout.dialog_list_header).setCancelable(isCancelable).create();
			} else {
				dialog = DialogPlus.newDialog(context).setContentHolder(holder).setGravity(gravity).setAdapter(adapter)
						.setOnClickListener(clickListener).setOnItemClickListener(itemClickListener).setExpanded(false)
						.setHeader(R.layout.dialog_list_header).setFooter(footer).setCancelable(isCancelable).create();
			}

		} else {
			dialog = DialogPlus.newDialog(context).setContentHolder(holder).setGravity(gravity).setOnClickListener(clickListener)
					.setOnItemClickListener(itemClickListener).setExpanded(false).setCancelable(isCancelable).create();
		}

		dialog.show();
	}

	/** 下单优惠码对话框 **/
	public static AlertDialog showDisCodeDialog(Context context, String str, final Callback okClicked) {
		final AlertDialog alertDialog = new AlertDialog.Builder(context).create();
		View layout = LayoutInflater.from(context).inflate(R.layout.dialog_showdiscode, null);
		alertDialog.setView(layout);
		TextView code = (TextView) layout.findViewById(R.id.tv);
		code.setText(str);

		final EditText name = (EditText) layout.findViewById(R.id.name_et);
		final EditText mobile = (EditText) layout.findViewById(R.id.mobile_et);
		final CheckBox isSendMsg = (CheckBox) layout.findViewById(R.id.issendmsg);

		layout.findViewById(R.id.close_iv).setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				alertDialog.dismiss();
			}
		});

		// 确认按钮
		layout.findViewById(R.id.dialog_ok).setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				if (okClicked == null) {

				} else {
					okClicked.positiveClick(isSendMsg.isChecked(), name.getText().toString(), mobile.getText().toString(), alertDialog);
				}
			}
		});
		alertDialog.setCancelable(false);
		// Showing Alert Message
		alertDialog.show();
		return alertDialog;
	}
	
	
	

	/** 积分攻略对话框 **/
	public static AlertDialog showIntegraDialog(Context context) {
		final AlertDialog Dialog = new AlertDialog.Builder(context).create();
		View layout = LayoutInflater.from(context).inflate(R.layout.dialog_integral, null);
		Dialog.setView(layout);

		// 确认按钮
		layout.findViewById(R.id.ok_bt).setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				Dialog.dismiss();
			}
		});
		Dialog.show();
		return Dialog;
	}
	
	

	/** 刮刮乐弹框 **/
	public static AlertDialog showScratchDialog(Context context,String desc,boolean hasTitle) {
		final AlertDialog Dialog = new AlertDialog.Builder(context).create();
		View layout = LayoutInflater.from(context).inflate(R.layout.dialog_scratch, null);
		
		TextView title_tv = (TextView) layout.findViewById(R.id.title_tv);
		if(!hasTitle){
			title_tv.setVisibility(View.GONE);
		}
		TextView desc_tv = (TextView) layout.findViewById(R.id.desc_tv);
		desc_tv.setText(desc+"");
		Dialog.setView(layout);

		// 确认按钮
		layout.findViewById(R.id.ok_bt).setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				Dialog.dismiss();
			}
		});
		
		
		
		
		
		
		Dialog.show();
		return Dialog;
	}
	
	
	
	

	/** 优惠券转赠对话框 **/
	public static AlertDialog showGiveDialog(Context context, String str, final Callback okClicked) {
		final AlertDialog alertDialog = new AlertDialog.Builder(context).create();
		View layout = LayoutInflater.from(context).inflate(R.layout.dialog_showgivecode, null);
		alertDialog.setView(layout);
		final ImageView close_iv = (ImageView) layout.findViewById(R.id.close_iv);
		final EditText mobile = (EditText) layout.findViewById(R.id.mobile_et);
		final CheckBox isSendMsg = (CheckBox) layout.findViewById(R.id.issendmsg);

		// 确认按钮
		layout.findViewById(R.id.dialog_ok).setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				if (okClicked == null) {

				} else {
					okClicked.positiveClick(isSendMsg.isChecked(), mobile.getText().toString(), mobile.getText().toString(), alertDialog);
				}
			}
		});

		close_iv.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				alertDialog.dismiss();
			}
		});
		alertDialog.setCancelable(false);
		// Showing Alert Message
		alertDialog.show();
		return alertDialog;
	}

	/** 商品购买 **/
	/**
	 * type:Dialog种类 str:普通dialog显示文本，list和grid传null
	 * adapter:list和grid穿入适配器，普通传null click:重写确定取消按钮监听
	 * itemClick:重写List和GridDialog的Item监听
	 **/
	public static void showBuyDialog(int type, String str, int gravity, final Context context, SimpleAdapter adapter, final DProduct dp,
			BitmapUtils bitmapUtils, final IProductInfoView ipv, final int flag, OnClickListener click, OnItemClickListener itemClick) {
		boolean isCancelable;
		BuyGridHolder holder = new BuyGridHolder(3);
		isCancelable = false;
		OnClickListener clickListener = new OnClickListener() {
			@Override
			public void onClick(DialogPlus dialog, View view) {
				switch (view.getId()) {
				case R.id.submit_but:
					Toast.makeText(context, "确定", Toast.LENGTH_LONG).show();
					break;
				}
			}
		};
		if (click != null) {
			clickListener = click;
		}

		OnItemClickListener itemClickListener = new OnItemClickListener() {
			@Override
			public void onItemClick(DialogPlus dialog, Object item, View view, int position) {
				TextView textView = (TextView) view.findViewById(R.id.text_view);
				String clickedAppName = textView.getText().toString();
				dialog.dismiss();
				Toast.makeText(context, clickedAppName + " clicked", Toast.LENGTH_LONG).show();
			}
		};
		if (itemClick != null) {
			itemClickListener = itemClick;
		}

		// 初始化商品信息
		final DialogPlus dialog = showBuyContentDialog(holder, gravity, adapter, clickListener, itemClickListener, isCancelable, context);
		ImageView pro_iv = (ImageView) dialog.findViewById(R.id.pro_iv);
		ViewTransformUtil.layoutParams(pro_iv, pro_iv.getLayoutParams(), 180, 180);
		TextView price_tv = (TextView) dialog.findViewById(R.id.price_tv);
		TextView stock_tv = (TextView) dialog.findViewById(R.id.stock_tv);
		TextView pro_desc = (TextView) dialog.findViewById(R.id.pro_desc);
		pro_desc.setText(dp.getDesc());
		View line1 = dialog.findViewById(R.id.line1);
		View line2 = dialog.findViewById(R.id.line2);
		TextView desc_tv = (TextView) dialog.findViewById(R.id.desc_tv);
		if (adapter.getDataSouce().size() < 1) {
			line1.setVisibility(View.GONE);
			line2.setVisibility(View.GONE);
			desc_tv.setText("");
		}

		bitmapUtils.display(pro_iv, dp.getImageurl() + Constant.IMAGE_SIZE_100);
		LinearLayout actionsub_ll = (LinearLayout) dialog.findViewById(R.id.actionsub_ll);
		addAndSubView = new AddAndSubView(context);
		addAndSubView.setButtonBgResource(R.drawable.bt_add, R.drawable.bt_remove);
		actionsub_ll.addView(addAndSubView);
		addAndSubView.setNum(1);
		addAndSubView.setOnNumChangeListener(new OnNumChangeListener() {

			@Override
			public void onNumChange(View view, int num) {
				if (dp.getPsuite() != null) {
					if (num > dp.getPsuite().getNum()) {// 如果大于套餐数量
						ToastUtil.show("库存数不足" + (dp.getPsuite().getNum() + 1) + "件");
					}
				} else {// 普通商品
					if (num > dp.getNum()) {
						ToastUtil.show("库存数不足" + (dp.getNum() + 1) + "件");
					}
				}
			}
		});

		if (dp.getStock_flag() != null) {
			stock_tv.setText(Html.fromHtml("&nbsp;<font color='red'>" + dp.getStock_flag() + "</font>&nbsp;"));
		} else {
			stock_tv.setText("");
		}
		if (dp.getPsuite() == null) {
			if (dp.getProminfo() != null) {
				price_tv.setText("￥" + CommonUtil.conversionDouble(dp.getProminfo().getProm_price()) + "");
				pro_desc.setText(dp.getProminfo().getProm_des());
			} else {
				price_tv.setText("请选择一个规格");
				price_tv.setText("￥" + CommonUtil.conversionDouble(dp.getPrice()) + "");
			}
		} else {
			pro_desc.setText(dp.getPsuite().getDescript());
			price_tv.setText("￥" + CommonUtil.conversionDouble(dp.getPsuite().getSale_price()) + "");
		}

		ImageView close_iv = (ImageView) dialog.findViewById(R.id.close_iv);
		close_iv.setOnClickListener(new View.OnClickListener() {// 关闭
			@Override
			public void onClick(View arg0) {
				dialog.dismiss();
			}
		});

		Button submit_but = (Button) dialog.findViewById(R.id.submit_but);
		if (flag == 2) {
			submit_but.setText("加入购物车");
		}
		submit_but.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View arg0) {

				if(dp.getPsuite()!=null){
					if(addAndSubView.getNum()>dp.getPsuite().getNum()){//如果大于套餐数量
						ToastUtil.show("库存数不足"+(dp.getPsuite().getNum()+1)+"件");
					}else {
						dp.setSale_num(addAndSubView.getNum());
						ipv.doBuy(dp, flag,dialog);
					}
				}else{//普通商品
					if(addAndSubView.getNum()>dp.getNum()){
						ToastUtil.show("库存数不足"+(dp.getNum()+1)+"件");
					}else {
						dp.setSale_num(addAndSubView.getNum());
						ipv.doBuy(dp, flag,dialog);
					}
				}
			}
		});

		dialog.show();

	}

	private static DialogPlus showBuyContentDialog(Holder holder, int gravity, BaseAdapter adapter, OnClickListener clickListener,
			OnItemClickListener itemClickListener, boolean isCancelable, Context context) {
		DialogPlus dialog = DialogPlus.newDialog(context).setContentHolder(holder).setGravity(gravity).setAdapter(adapter)
				.setOnClickListener(clickListener).setOnItemClickListener(itemClickListener).setExpanded(false).setHeader(R.layout.dialog_buy_header)
				.setFooter(R.layout.dialog_buy_footer).setCancelable(isCancelable).create();

		return dialog;
	}

	/** 登录对话框 **/
	public static AlertDialog showLoginDialog(Context context, String str, final Callback okClicked) {
		final AlertDialog alertDialog = new AlertDialog.Builder(context).create();
		View layout = LayoutInflater.from(context).inflate(R.layout.dialog_showlogin, null);
		alertDialog.setView(layout);
		final ImageView close_iv = (ImageView) layout.findViewById(R.id.close_iv);
		final EditText mobile = (EditText) layout.findViewById(R.id.mobile_et);
		final CheckBox isSendMsg = (CheckBox) layout.findViewById(R.id.issendmsg);

		// 确认按钮
		layout.findViewById(R.id.dialog_ok).setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				if (okClicked == null) {

				} else {
					okClicked.positiveClick(isSendMsg.isChecked(), mobile.getText().toString(), mobile.getText().toString(), alertDialog);
				}
			}
		});

		close_iv.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				alertDialog.dismiss();
			}
		});
		alertDialog.setCancelable(false);
		// Showing Alert Message
		alertDialog.show();
		return alertDialog;
	}

	/** 头像放大支持手势 **/
	@SuppressLint("InflateParams")
	public static void showImg(Bitmap res, Context context) {
		// 初始化一个自定义的Dialog
		final CustomDialog.Builder b = new CustomDialog.Builder(context);
		LayoutInflater inflater = LayoutInflater.from(context);
		final View view = inflater.inflate(R.layout.progress_dialog, null);

		ImageView close = (ImageView) view.findViewById(R.id.close_iv);
		LinearLayout ll_viewArea = (LinearLayout) view.findViewById(R.id.ll_viewArea);
		LinearLayout.LayoutParams parm = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);
		parm.gravity = Gravity.CENTER;

		// 自定义布局控件，用来初始化并存放自定义imageView
		ViewArea viewArea = new ViewArea(context, res);

		ll_viewArea.addView(viewArea, parm);

		b.setView(view);
		b.show();

		close.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				b.dismiss();
			}
		});
	}

	// 二维码对话框
	public static AlertDialog showCancelmDialog(Context context, int view, String name, String address, Bitmap bitmap) {
		final AlertDialog alertDialog = new AlertDialog.Builder(context).create();
		View layout = LayoutInflater.from(context).inflate(view, null);
		ImageView iv = (ImageView) layout.findViewById(R.id.secondcode);
		iv.setImageBitmap(bitmap);
		TextView name_tv = (TextView) layout.findViewById(R.id.name);
		name_tv.setText(name);
		TextView address_tv = (TextView) layout.findViewById(R.id.address);
		address_tv.setText(address);
		alertDialog.setView(layout);

		alertDialog.setCancelable(true);
		// Showing Alert Message
		alertDialog.show();
		return alertDialog;
	}

	/** 回调接口 **/
	public interface Callback {

		/** 确定按钮回调该函数 **/
		void positiveClick(boolean isChecked, String name, String mobile, AlertDialog alertDialog);

	}

	/** 异地登录对话框 **/
	public static AlertDialog addressDialog(Context context, String str, final DialogInterface.OnClickListener okClicked,
			final DialogInterface.OnClickListener cancelClicked) {
		final AlertDialog alertDialog = new AlertDialog.Builder(context).create();
		View layout = LayoutInflater.from(context).inflate(R.layout.dialog_address, null);
		alertDialog.setView(layout);
		final TextView address_tv = (TextView) layout.findViewById(R.id.address_tv);
		address_tv.setText("当前位置：" + str);

		// 确认按钮
		layout.findViewById(R.id.confirm_bt).setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				if (okClicked == null) {

				} else {
					okClicked.onClick(alertDialog, DialogInterface.BUTTON_POSITIVE);
				}
			}
		});

		// 取消按钮
		layout.findViewById(R.id.cancel_bt).setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				if (cancelClicked == null) {
					alertDialog.dismiss();
				} else {
					cancelClicked.onClick(alertDialog, DialogInterface.BUTTON_NEGATIVE);
				}
			}
		});
		alertDialog.setCancelable(false);
		// Showing Alert Message
		alertDialog.show();
		return alertDialog;
	}

	/** 公告对话框 **/
	public static AlertDialog noticeDialog(Context context, String str) {
		final AlertDialog Dialog = new AlertDialog.Builder(context).create();
		View layout = LayoutInflater.from(context).inflate(R.layout.dialog_notice, null);
		TextView tv = (TextView) layout.findViewById(R.id.tv);
		tv.setText(str);
		Dialog.setView(layout);

		// 确认按钮
		layout.findViewById(R.id.dialog_cancel).setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				Dialog.dismiss();
			}
		});
		Dialog.show();
		return Dialog;
	}

	/** 礼券选择对话框 **/
	public static AlertDialog setCouponsDialog(final Context context, String str, final List<DPrizeCoupon> dc) {
		final AlertDialog Dialog = new AlertDialog.Builder(context).create();
		View layout = LayoutInflater.from(context).inflate(R.layout.dialog_coupons, null);
		MyCouponsAdapter ca = new MyCouponsAdapter(context, dc, R.layout.item_counpons, null);
		ListView listiv = (ListView) layout.findViewById(R.id.conupon_lv);
		listiv.setAdapter(ca);
		ca.notifyDataSetChanged();
		Dialog.setView(layout);
		Dialog.show();
		listiv.setOnItemClickListener(new AdapterView.OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
				// TODO Auto-generated method stub
				ConfirmOrderActivity activity = (ConfirmOrderActivity) context;
				activity.restCoupon(dc.get(arg2));
				Dialog.dismiss();
			}
		});
		return Dialog;
	}

	public static void showBoradFragment(Context context, CharSequence title, CharSequence content, CharSequence button,
			View.OnClickListener onClickListener) {
		FragmentTransaction mFragTransaction = ((FragmentActivity) context).getSupportFragmentManager().beginTransaction();
		Fragment fragment = ((FragmentActivity) context).getSupportFragmentManager().findFragmentByTag("dialogFragment");
		if (fragment != null) {
			// 为了不重复显示dialog，在显示对话框之前移除正在显示的对话框
			mFragTransaction.remove(fragment);
		}
		final CustomDialogFragment dialogFragment = CustomDialogFragment.newInstance(context);
		dialogFragment.setTitle(title);
		dialogFragment.setContent(content);
		dialogFragment.setButton(button, onClickListener);
		dialogFragment.show(mFragTransaction, "dialogFragment");// 显示一个Fragment并且给该Fragment添加一个Tag，可通过findFragmentByTag找到该Fragment
	}

	public static void dismissBoardFragment(Context context) {
		FragmentTransaction mFragTransaction = ((FragmentActivity) context).getSupportFragmentManager().beginTransaction();
		DialogFragment fragment = (DialogFragment) ((FragmentActivity) context).getSupportFragmentManager().findFragmentByTag("dialogFragment");
		if (fragment != null) {
			// 为了不重复显示dialog，在显示对话框之前移除正在显示的对话框
			mFragTransaction.remove(fragment).commit();
			fragment.dismiss();
		}
	}

	public static void showRabbitCustomDialog(Context context, CharSequence content, CharSequence left, CharSequence right,
			android.content.DialogInterface.OnClickListener onClickListener) {
		FragmentTransaction mFragTransaction = ((FragmentActivity) context).getSupportFragmentManager().beginTransaction();
		Fragment fragment = ((FragmentActivity) context).getSupportFragmentManager().findFragmentByTag("rabbitdialogFragment");
		if (fragment != null) {
			// 为了不重复显示dialog，在显示对话框之前移除正在显示的对话框
			mFragTransaction.remove(fragment);
		}
		final RabbitCustomDialog dialogFragment = RabbitCustomDialog.NewInewInstance(context);
		dialogFragment.setContent(content);
		dialogFragment.setButton(left, right);
//		dialogFragment.setRabbitIcon(drawbleId);
		dialogFragment.setButtonListener(onClickListener);
		dialogFragment.show(mFragTransaction, "rabbitdialogFragment");// 显示一个Fragment并且给该Fragment添加一个Tag，可通过findFragmentByTag找到该Fragment
	}
	
	
	public static void dismissRabbitFragment(Context context) {
		FragmentTransaction mFragTransaction = ((FragmentActivity) context).getSupportFragmentManager().beginTransaction();
		DialogFragment fragment = (DialogFragment) ((FragmentActivity) context).getSupportFragmentManager().findFragmentByTag("rabbitdialogFragment");
		if (fragment != null) {
			// 为了不重复显示dialog，在显示对话框之前移除正在显示的对话框
			mFragTransaction.remove(fragment).commit();
//			fragment.dismiss();
		}
	}

	//设置支付信息对话框
	public static void showPayDialog(Context context,PayDialog.Builder.PayListener payListener) {
		PayDialog.Builder dialog = new PayDialog.Builder(context);
		dialog.setPayListener(payListener);
		dialog.create().show();
	}

}
