package com.hwc.member.db;

import java.util.ArrayList;
import java.util.List;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

import com.huimodel.api.base.DProduct;
import com.hwc.member.bean.ShoppingCartBean;

/**
 * SHz
 */
public class ShoppingCartDao {

    private volatile static ShoppingCartDao instance = null;
    private SQLiteDatabase db;

    /**
     * 获取SimpleDemoDB实例
     */
    public static ShoppingCartDao getInstance() {
        if (instance == null) {
            synchronized (ShoppingCartDao.class) {
                if (instance == null) {
                    instance = new ShoppingCartDao();
                }
            }
        }
        return instance;
    }

    private Cursor cursor;

    public void close() {
        if (db != null) {
            db.close();
        }
        if (cursor != null) {
            cursor.close();
        }
    }

    public int getGoodsCount() {
        db = DBHelper.getInstance().getReadableDatabase();
        cursor = db.rawQuery("select count(*) from " + DBHelper.TB_SHOPPING_CART, null);
        int count = 0;
        //游标移到第一条记录准备获取数据
        if (cursor.moveToFirst()) {
            // 获取数据中的LONG类型数据
            count = (int) cursor.getLong(0);
        }
        close();
        return count;
    }

    public boolean isExistGood(String productID) {
        if (productID == null) {
            return false;
        }
        db = DBHelper.getInstance().getReadableDatabase();
        cursor = db.query(DBHelper.TB_SHOPPING_CART, null, ShoppingCartBean.KEY_PRODUCT_ID + "=?", new String[]{productID}, null, null, null);
        boolean isExist = cursor.moveToFirst();
        close();
        return isExist;
    }

    /**
     * 添加购物车商品信息
     *
     * @param productID 规格ID
     * @param num       商品数量
     */
    public void saveShoppingInfo(String pid, String num, String sid, String name) {
        if (pid == null || "".equals(pid) || num == null || "".equals(num) || sid == null || "".equals(sid)) {
            return;
        }
        if(queryItem(pid, sid) != null){
        	//数据库有对应pid和sid的数据时修改数量
        	updateGoodsNum(pid, String.valueOf(Integer.parseInt(queryItem(pid, sid)) + Integer.parseInt(num)), sid);
        }else{
        	//数据库没有对应pid和sid的数据时增加一条数据
        	db = DBHelper.getInstance().getReadableDatabase();
        	ContentValues values = new ContentValues();
        	values.put(ShoppingCartBean.KEY_PRODUCT_ID, pid);
        	values.put(ShoppingCartBean.KEY_NUM, num);
        	values.put(ShoppingCartBean.KEY_SID, sid);
        	values.put(ShoppingCartBean.KEY_NAME, name);
        	db.insert(DBHelper.TB_SHOPPING_CART, null, values);
        	close();
        }
    }

    /**
     * 删除购物车商品
     *
     * @param productID 规格ID
     */
    public void deleteShoppingInfo(String productID) {
        if (productID == null) {
            return;
        }
        db = DBHelper.getInstance().getReadableDatabase();
        db.delete(DBHelper.TB_SHOPPING_CART, ShoppingCartBean.KEY_PRODUCT_ID + " =?", new String[]{productID});
        close();
    }

    public void delAllGoods() {
        db = DBHelper.getInstance().getReadableDatabase();
        db.delete(DBHelper.TB_SHOPPING_CART, null, null);
        close();
    }

    public void deleteGoodList(List<String> goodList) {
        if (goodList == null) {
            return;
        }
        db = DBHelper.getInstance().getReadableDatabase();
        for (int i = 0; i < goodList.size(); i++) {
            db.delete(DBHelper.TB_SHOPPING_CART, ShoppingCartBean.KEY_PRODUCT_ID + " =?", new String[]{goodList.get(i)});
        }
        close();
    }

    /**
     * 修改购物车中某件商品的信息
     *
     * @param productID 规格ID
     * @param num       商品数量
     */
    public void updateGoodsNum(String productID, String num, String sid) {
        if (productID == null || "".equals(productID) || num == null || "".equals(num) || sid == null || "".equals(sid)) {
            return;
        }
        db = DBHelper.getInstance().getReadableDatabase();
        ContentValues values = new ContentValues();
        if (productID != null && !"".equals(productID) && num != null && !"".equals(num) && sid != null && !"".equals(sid)) {
            values.put("num", num);
            db.update(DBHelper.TB_SHOPPING_CART, values, ShoppingCartBean.KEY_PRODUCT_ID + "=? and " + ShoppingCartBean.KEY_SID + "=?", new String[]{productID, sid});
        }
        close();
    }

    public String getNumByProductID(String productID) {
        if (productID == null) {
            return "1";
        }
        db = DBHelper.getInstance().getReadableDatabase();
        cursor = db.query(DBHelper.TB_SHOPPING_CART, new String[]{ShoppingCartBean.KEY_NUM}, ShoppingCartBean.KEY_PRODUCT_ID + "=?", new String[]{productID}, null, null, null);
        if (cursor.moveToFirst()) {
            return cursor.getString(0);
        }
        close();
        return "1";
    }

    /**
     * 查询数据库中的购物车中的商品信息
     *
     * @return 购物车中的商品信息
     */
    public List<DProduct> getProductList() {
        db = DBHelper.getInstance().getReadableDatabase();
        List<DProduct> mList = new ArrayList<DProduct>();
        Cursor cursor = db.rawQuery("select * from " + DBHelper.TB_SHOPPING_CART, null);
        if (cursor.moveToFirst()) {
            do {
                String productID = cursor.getString(cursor.getColumnIndex(ShoppingCartBean.KEY_PRODUCT_ID));
                String num = cursor.getString(cursor.getColumnIndex(ShoppingCartBean.KEY_NUM));
                String sid = cursor.getString(cursor.getColumnIndex(ShoppingCartBean.KEY_SID));
                if (productID != null && !"".equals(productID) && num != null && !"".equals(num) && sid != null && !"".equals(sid)) {
                	DProduct g = new DProduct();
                	g.setPid(Long.parseLong(productID));
                	g.setNum(Integer.parseInt(num));
                	g.setShop_id(Long.parseLong(sid));
                    mList.add(g);
                }
            } while (cursor.moveToNext());
        }
        cursor.close();
        return mList;
    }
    
 // 查询一条记录
 	public String queryItem(String pid, String sid) {
 		db = DBHelper.getInstance().getWritableDatabase();
 		if (db.isOpen()) {
 			Cursor c = db.rawQuery(
 					"select * from " + DBHelper.TB_SHOPPING_CART + " where " + ShoppingCartBean.KEY_PRODUCT_ID + " = ? and " + ShoppingCartBean.KEY_SID + " = ?",
 					new String[] { pid, sid });
 			if (c != null && c.moveToFirst()) {
 				String num = c.getString(c.getColumnIndex(ShoppingCartBean.KEY_NUM));
 				c.close();
 				db.close();
 				return num;
 			}else{
 				c.close();
 				db.close();
 				return null;
 			}
 		} else {
 			return null;
 		}

 	}
 	
 	 // 获取对应pid的num
 	public String getNum(String pid) {
 		db = DBHelper.getInstance().getWritableDatabase();
 		if (db.isOpen()) {
 			Cursor c = db.rawQuery("select * from " + DBHelper.TB_SHOPPING_CART + " where " + ShoppingCartBean.KEY_PRODUCT_ID + " = ?",
 					new String[] { pid });
 			if (c != null && c.moveToFirst()) {
 				String num = c.getString(c.getColumnIndex(ShoppingCartBean.KEY_NUM));
 				c.close();
 				db.close();
 				return num;
 			}else{
 				c.close();
 				db.close();
 				return null;
 			}
 		} else {
 			return null;
 		}

 	}
 	
 // 获取对应pid的num
  	public String getShopName(String sid, String pid) {
  		db = DBHelper.getInstance().getWritableDatabase();
  		if (db.isOpen()) {
  			Cursor c = db.rawQuery("select * from " + DBHelper.TB_SHOPPING_CART + " where " + ShoppingCartBean.KEY_PRODUCT_ID + " = ? and " + ShoppingCartBean.KEY_SID + " = ?",
  					new String[] { pid, sid });
  			if (c != null && c.moveToFirst()) {
  				String name = c.getString(c.getColumnIndex(ShoppingCartBean.KEY_NAME));
  				c.close();
  				db.close();
  				return name;
  			}else{
  				c.close();
  				db.close();
  				return null;
  			}
  		} else {
  			return null;
  		}

  	}


}
